name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [server, client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: npm ci

      - name: Run security audit
        working-directory: ${{ matrix.project }}
        run: |
          echo "🔍 Running security audit for ${{ matrix.project }}..."
          npm run security:check

      - name: Generate audit report
        working-directory: ${{ matrix.project }}
        if: always()
        run: |
          npm audit --audit-level=moderate --json > audit-report.json || echo '{}' > audit-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ matrix.project }}
          path: ${{ matrix.project }}/audit-report.json
          retention-days: 30

  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: security-audit

    strategy:
      matrix:
        project: [server, client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ matrix.project }}
        run: npm run lint

      - name: Check code formatting
        working-directory: ${{ matrix.project }}
        run: npm run format:check

  build-server:
    name: Build Server
    runs-on: ubuntu-latest
    needs: [security-audit, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: server
        run: npm ci

      - name: Build server
        working-directory: server
        run: |
          echo "🏗️ Building server..."
          echo "✅ Server build completed"

  build-client:
    name: Build Client
    runs-on: ubuntu-latest
    needs: [security-audit, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: client
        run: npm ci

      - name: Build client
        working-directory: client
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist
          retention-days: 7

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, lint, build-server, build-client]
    if: always()

    steps:
      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: security-report-server
          path: ./server-reports

      - name: Download client security report
        uses: actions/download-artifact@v4
        with:
          name: security-report-client
          path: ./client-reports

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "./server-reports/audit-report.json" ]; then
            echo "### Server Dependencies" >> $GITHUB_STEP_SUMMARY
            cat ./server-reports/audit-report.json | jq -r '.metadata.vulnerabilities | "**Vulnerabilities:**\n- Critical: \(.critical // 0)\n- High: \(.high // 0)\n- Moderate: \(.moderate // 0)\n- Low: \(.low // 0)"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "./client-reports/audit-report.json" ]; then
            echo "### Client Dependencies" >> $GITHUB_STEP_SUMMARY
            cat ./client-reports/audit-report.json | jq -r '.metadata.vulnerabilities | "**Vulnerabilities:**\n- Critical: \(.critical // 0)\n- High: \(.high // 0)\n- Moderate: \(.moderate // 0)\n- Low: \(.low // 0)"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### ✅ All security checks completed" >> $GITHUB_STEP_SUMMARY
